@{
    ViewBag.Title = "Active Item Locations";
    Layout = "../Shared/_RequestLayout.cshtml";
}

<h2>Active Item Location Counts</h2>
@if (ViewBag.Start != string.Empty)
{
    <div class="alert alert-info">
        <i class="fa fa-eye"></i> Viewing @ViewBag.Collection @if (ViewBag.Start != null)
        {<span>@ViewBag.Start - @ViewBag.End</span>}
    </div>
}
<hr />
<div class="row text-center">
    <div style="width:100%;height:100%">
        <canvas id="myChart" style="padding: 0;margin: auto;display: block;"></canvas>
    </div>
</div>
<button onclick="PrintImage()" class="btn btn-info">Print Chart</button>
<hr />
<h3>Refine</h3>
@using (Html.BeginForm())
{
    <div class="form-group">
        <label for="collection">Choose Repository</label>
        <select class="form-control col-md-6" id="CollectionList" name="CollectionList">
            <option value="All Repositories">All Repositories</option>
            <option value="Manuscript Collection">Manuscript Collection</option>
            <option value="University Archives">University Archives</option>
            <option value="Laupus History Collections">Laupus History Collections</option>
            <option value="Country Doctor Museum">Country Doctor Museum</option>
            <option value="Books">Books</option>
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Update Chart</button>
    <input id="collHidden" type="hidden" value="@ViewBag.Collection" />


}
@section Scripts {
    @Scripts.Render("~/bundles/chart")

    <script type="text/javascript">
        function PrintImage() {
            var canvas = document.getElementById("myChart");
            var win = window.open();
            win.document.write("<br><img src='" + canvas.toDataURL() + "'/>");
            win.print();
        }
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetActiveLocationsChart", "Report")' + '?repo=' + $("#collHidden").val() ,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (chData) {
                var aData = chData;
                var aLabels = aData[0];
                var aDatasets1 = aData[1];
                var dataT = {
                    labels: aLabels,
                    datasets: [{
                        label: "Test Data",
                        data: aDatasets1,
                        fill: false,
                        backgroundColor: ["rgba(255, 99, 132, 0.4)", "rgba(255, 205, 86, 0.4)", "rgba(54, 162, 235, 0.4)", "rgba(75, 192, 192, 0.4)"],
                        borderColor: ["rgb(255, 99, 132)", "rgb(255, 205, 86)", "rgb(54, 162, 235)", "rgb(75, 192, 192)"],
                        borderWidth: 1
                    }]
                };
                var ctx = $("#myChart").get(0).getContext("2d");
                var myNewChart = new Chart(ctx, {
                    type: 'bar',
                    data: dataT,
                    options: {
                        responsive: true,
                        title: { display: true, text: 'Active Item Location Counts' },
                        legend: {
                            position: 'right',
                            labels: {
                                generateLabels: function(chart) {
                                    var data = chart.data;
                                    if (data.labels.length && data.datasets.length) {
                                        return data.labels.map(function(label, i) {
                                            var meta = chart.getDatasetMeta(0);
                                            var ds = data.datasets[0];
                                            var arc = meta.data[i];
                                            var custom = arc && arc.custom || {};
                                            var getValueAtIndexOrDefault = Chart.helpers.getValueAtIndexOrDefault;
                                            var arcOpts = chart.options.elements.arc;
                                            var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                                            var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                                            var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);

                                            // value of the current label
                                            var value = chart.config.data.datasets[arc._datasetIndex].data[arc._index];

                                            return {
                                                text: label + " : " + value,
                                                fillStyle: fill,
                                                strokeStyle: stroke,
                                                lineWidth: bw,
                                                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                                                index: i
                                            };
                                        });
                                    } else {
                                        return [];
                                    }
                                }
                            }
                        },
                        scales: {
                            xAxes: [{
                                display: true,
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Location'
                                }
                            }],
                            yAxes: [{
                                display: true,
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Count'
                                },
                                ticks: {
                                    stepSize: 1,
                                    beginAtZero: true
                                }
                            }]
                        }
                    }
                });
            }
        });
    </script>
}